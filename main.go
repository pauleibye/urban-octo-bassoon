package main

import (
	"bytes"
	"fmt"
	"html/template"
	"io"
	"math/rand"
	"os"
	"time"

	"github.com/go-echarts/go-echarts/v2/charts"
	"github.com/go-echarts/go-echarts/v2/opts"
	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
)

// type Film struct {
// 	Title    string
// 	Director string
// }

type Template struct {
	templates *template.Template
}

func (t *Template) Render(w io.Writer, name string, data interface{}, c echo.Context) error {
	return t.templates.ExecuteTemplate(w, name, data)
}

func convertToLineData(series []int) []opts.LineData {
	items := make([]opts.LineData, 0)
	for _, v := range series {
		items = append(items, opts.LineData{Value: v})
	}
	return items
}

func generateLineItems() []opts.LineData {
	items := make([]opts.LineData, 0)
	for i := 0; i < 7; i++ {
		items = append(items, opts.LineData{Value: rand.Intn(300)})
	}
	return items
}

func render(series []int) template.HTML {
	bar := charts.NewLine()
	bar.SetGlobalOptions(charts.WithTitleOpts(opts.Title{
		Title:    "My first bar chart generated by go-echarts",
		Subtitle: "It's extremely easy to use, right?",
	}),
		charts.WithColorsOpts(opts.Colors{"red", "green"}),
		charts.WithInitializationOpts(
			opts.Initialization{
				Theme:           "dark",
				BackgroundColor: "transparent",
			},
		),
		charts.WithLegendOpts(
			opts.Legend{
				Show: true,
				Top:  "20%",
			},
		),
	)

	bar.SetXAxis([]string{
		time.Now().Format("2006-01-02 15:04:05"),
		time.Now().Add(time.Minute).Format("2006-01-02 15:04:05"),
		time.Now().Add(time.Minute * 2).Format("2006-01-02 15:04:05"),
		time.Now().Add(time.Minute * 3).Format("2006-01-02 15:04:05"),
		time.Now().Add(time.Minute * 4).Format("2006-01-02 15:04:05"),
		time.Now().Add(time.Minute * 5).Format("2006-01-02 15:04:05"),
		time.Now().Add(time.Minute * 6).Format("2006-01-02 15:04:05"),
	}).
		AddSeries("Category A", convertToLineData(series)).
		SetSeriesOptions(charts.WithLineChartOpts(opts.LineChart{Smooth: true}))

	var buf bytes.Buffer
	_ = bar.Render(&buf)

	return template.HTML(buf.String())
}

func main() {

	e := echo.New()

	e.Use(middleware.Logger())
	e.Use(middleware.Recover())
	e.Use(middleware.BodyDump(func(c echo.Context, reqBody, resBody []byte) {
		fmt.Printf("paultest reqBody: %v\n", string(reqBody))
		fmt.Printf("paultest resBody: %v\n", string(resBody))
	}))

	t := &Template{
		templates: template.Must(template.ParseGlob("templates/*.html")),
	}
	e.Renderer = t

	e.GET("/", index)
	e.GET("/series/:id", getSeries)
	e.PUT("/series/:id", putSeries)

	httpPort := os.Getenv("PORT")
	if httpPort == "" {
		httpPort = "8080"
	}

	e.Logger.Debug(e.Start(":" + httpPort))
}
